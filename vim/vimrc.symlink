"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible              " required
filetype off                  " required

" set the runtime path to include Plug and initialize
call plug#begin('~/.vim/plugged')

Plug 'Lokaltog/vim-powerline'
Plug 'bronson/vim-trailing-whitespace'
Plug 'editorconfig/editorconfig-vim'
Plug 'elzr/vim-json'
Plug 'heavenshell/vim-jsdoc'
Plug 'janko/vim-test'
Plug 'joaohkfaria/vim-jest-snippets'
Plug 'jparise/vim-graphql'
Plug 'kien/ctrlp.vim'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'mileszs/ack.vim'
Plug 'mxw/vim-jsx'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'

" Color schemes
Plug 'altercation/vim-colors-solarized'
Plug 'joshdick/onedark.vim'

" All of your Plugins must be added before the following line
call plug#end()              " required
filetype plugin indent on    " required



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" GENERAL PREFERENCES
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set laststatus=2
set showmatch
set incsearch
set hlsearch

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" highlight current line
set cursorline
set cmdheight=2
set switchbuf=useopen
set numberwidth=5
set showtabline=2

" Enables mouse
set mouse=a

set noswapfile
set nobackup

set wildignore+=*/node_modules/*

" Fold
set foldmethod=indent
set foldlevelstart=20

" Numbers
set number

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader=","
map ! :!
" Change to alternate file
map <leader><leader> <c-^>

vmap <C-c> :w !pbcopy<CR>

" Nerdtree
nmap <silent> <C-D> :NERDTreeToggle<CR>
nmap <silent> <C-F> :NERDTreeFind<CR>
" Whitespace remove
nmap <silent> dws :FixWhitespace<CR>

" Split line into new line
nnoremap K i<CR><Esc>

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

map <leader>p :CtrlP<cr>

" Move around syntastic errors
map <leader>] :lnext<CR>
map <leader>[ :lprev<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" VISUALS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable highlighting for syntax
syntax on

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

if has("gui_running")
   set guioptions=egmrt
   set guifont:Monaco:h20
endif

if exists('+colorcolumn')
  set colorcolumn=120
endif
syntax enable
set background=dark
let &t_Co=256
let g:solarized_termcolors=256
colorscheme onedark
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" PLUGIN SPECIFIC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""" NERD TREE
autocmd bufenter *
  \ if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") |
  \   q |
  \ endif

let g:NERDSpaceDelims = 1

""""""" typescript-vim does not set the right type that ts-server expects
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

"""""" Coc-prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile
command! -nargs=0 Lint :CocCommand tslint.fixAllProblems
command! -nargs=0 Eslint :CocCommand eslint.executeAutofix

command! -nargs=0 FormatJSON :%!python -m json.tool

"""""" Coc
set updatetime=300

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> ge <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Coc snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)
" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

"""""""""""""" Vim test
nmap <silent> t<C-n> :let $LOG_CONSOLE = 'false' <bar> TestNearest<CR>
nmap <silent> t<C-f> :let $LOG_CONSOLE = 'false' <bar> TestFile<CR>
nmap <silent> t<C-s> :let $LOG_CONSOLE = 'false' <bar> TestSuite<CR>
nmap <silent> t<C-l> :let $LOG_CONSOLE = 'false' <bar> TestLast<CR>
nmap <silent> t<C-g> :let $LOG_CONSOLE = 'false' <bar> TestVisit<CR>
let test#strategy = "neovim"
nmap <leader>rn <Plug>(coc-rename)

"""""""""""""" Ctrl p
let g:ctrlp_working_path_mode = 0
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|bower_components\|dev\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }
